def version = '0.5'
def versionResource = file("src/main/resources/version.txt")


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'com.github.johnrengelman.shadow'

compileJava.options.encoding = 'UTF-8'

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
  }
}

repositories {
  mavenCentral()
}

dependencies {
  compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.10.0'
  compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.10.0'
  compile group:'org.antlr', name:'antlr4-runtime',  version:'4.7.1'
  compile 'com.beust:jcommander:1.72'
  compile 'org.jsoup:jsoup:1.11.2'
  compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.4'
  compile group: 'commons-io', name: 'commons-io', version: '2.6'

  testCompile group:'junit', name:'junit', version:'4.12'
}

jar {
  manifest {
    attributes('Main-Class': 'org.mdolidon.hamster.CLI.CLIApp')
  }
}

task setVersionResource {
  doLast {
    versionResource.text = version
  }
}

shadowJar.mustRunAfter(setVersionResource)

task release {

  description "Build a shadow Jar with a clean version number, and the Debian package"
  dependsOn ([test, setVersionResource, shadowJar] as Set)

  // Fully imperative

  doLast {
    versionResource.delete()

    // The properly named shadow Jar
    copy {
      from "build/libs/hamster-all.jar"
      into "."
      rename  { "hamster-${version}.jar" }
    }

    def jar = file("hamster-${version}.jar")

    // The Debian Package

    def oldJars = fileTree("deb_scaffolding/hamster/usr/lib/hamster") 
    oldJars.each { it.delete() }
    def oldDeb = file("deb_scaffolding/hamster.deb")
    if(oldDeb.exists()) {
        oldDeb.delete()
    }

    copy {
      from jar
      into "deb_scaffolding/hamster/usr/lib/hamster"
    }


    def controlFile = file("deb_scaffolding/hamster/DEBIAN/control")
    def manifestSkeleton = controlFile.text
    def manifest = manifestSkeleton.replaceAll("Version:.*", "Version: ${version}").replaceAll("Installed-Size:.*", "Installed-Size: " + (int)Math.ceil(jar.size()/1024))
    controlFile.text = manifest

    "dpkg --build hamster".execute(null, new File("deb_scaffolding"))

    def debFile = file("deb_scaffolding/hamster.deb")
    debFile.renameTo("hamster-${version}.deb")
  }
}
